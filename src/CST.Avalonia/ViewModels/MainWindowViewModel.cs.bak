using System;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reactive;
using System.Reactive.Linq;
using ReactiveUI;
using Avalonia.Controls;
using CST.Avalonia.Views;
using CST;

namespace CST.Avalonia.ViewModels;

public class MainWindowViewModel : ViewModelBase
{
    private bool _isOpenBookPanelVisible = true;
    private GridLength _leftPanelWidth = new GridLength(350);
    private BookTabViewModel? _selectedBookTab;
    private Control? _openBookContent;
    private Control? _selectedBookView;

    public MainWindowViewModel()
    {
        OpenBooks = new ObservableCollection<BookTabViewModel>();
        
        // Commands
        ShowOpenBookCommand = ReactiveCommand.Create(ShowOpenBookPanel);
        ToggleOpenBookPanelCommand = ReactiveCommand.Create(ToggleOpenBookPanel);
        ExitCommand = ReactiveCommand.Create(Exit);
        
        SelectBookTabCommand = ReactiveCommand.Create<BookTabViewModel>(SelectBookTab);
        CloseBookTabCommand = ReactiveCommand.Create<BookTabViewModel>(CloseBookTab);
        CloseAllTabsCommand = ReactiveCommand.Create(CloseAllTabs);
        
        TileHorizontallyCommand = ReactiveCommand.Create(TileHorizontally);
        TileVerticallyCommand = ReactiveCommand.Create(TileVertically);
        
        FindInBookCommand = ReactiveCommand.Create(FindInBook);
        SearchAllBooksCommand = ReactiveCommand.Create(SearchAllBooks);
        AboutCommand = ReactiveCommand.Create(ShowAbout);

        // Reactive properties
        this.WhenAnyValue(x => x.OpenBooks.Count)
            .Select(count => count > 0)
            .ToPropertyEx(this, x => x.HasOpenBooks);

        this.WhenAnyValue(x => x.IsOpenBookPanelVisible)
            .Select(visible => visible ? 2 : 0)
            .ToPropertyEx(this, x => x.RightPanelColumn);
    }

    // Properties
    public ObservableCollection<BookTabViewModel> OpenBooks { get; }

    public bool IsOpenBookPanelVisible
    {
        get => _isOpenBookPanelVisible;
        set => this.RaiseAndSetIfChanged(ref _isOpenBookPanelVisible, value);
    }

    public GridLength LeftPanelWidth
    {
        get => _leftPanelWidth;
        set => this.RaiseAndSetIfChanged(ref _leftPanelWidth, value);
    }

    public BookTabViewModel? SelectedBookTab
    {
        get => _selectedBookTab;
        private set => this.RaiseAndSetIfChanged(ref _selectedBookTab, value);
    }

    public Control? OpenBookContent
    {
        get => _openBookContent;
        set => this.RaiseAndSetIfChanged(ref _openBookContent, value);
    }

    public Control? SelectedBookView
    {
        get => _selectedBookView;
        private set => this.RaiseAndSetIfChanged(ref _selectedBookView, value);
    }

    // Reactive properties
    public extern bool HasOpenBooks { [ObservableAsProperty] get; }
    public extern int RightPanelColumn { [ObservableAsProperty] get; }

    // Commands
    public ReactiveCommand<Unit, Unit> ShowOpenBookCommand { get; }
    public ReactiveCommand<Unit, Unit> ToggleOpenBookPanelCommand { get; }
    public ReactiveCommand<Unit, Unit> ExitCommand { get; }
    
    public ReactiveCommand<BookTabViewModel, Unit> SelectBookTabCommand { get; }
    public ReactiveCommand<BookTabViewModel, Unit> CloseBookTabCommand { get; }
    public ReactiveCommand<Unit, Unit> CloseAllTabsCommand { get; }
    
    public ReactiveCommand<Unit, Unit> TileHorizontallyCommand { get; }
    public ReactiveCommand<Unit, Unit> TileVerticallyCommand { get; }
    
    public ReactiveCommand<Unit, Unit> FindInBookCommand { get; }
    public ReactiveCommand<Unit, Unit> SearchAllBooksCommand { get; }
    public ReactiveCommand<Unit, Unit> AboutCommand { get; }

    // Methods
    public void SetOpenBookContent(Control content)
    {
        OpenBookContent = content;
    }

    public BookTabViewModel OpenBook(Book book, System.Collections.Generic.List<string>? searchTerms = null)
    {
        // Check if book is already open
        var existingTab = OpenBooks.FirstOrDefault(t => t.Book.FileName == book.FileName);
        if (existingTab != null)
        {
            SelectBookTab(existingTab);
            return existingTab;
        }

        // Create new tab
        var bookDisplayViewModel = new BookDisplayViewModel(book, searchTerms ?? new System.Collections.Generic.List<string>());
        var bookDisplayView = new BookDisplayView { DataContext = bookDisplayViewModel };
        
        var bookTab = new BookTabViewModel(book, bookDisplayViewModel, bookDisplayView);
        OpenBooks.Add(bookTab);
        
        SelectBookTab(bookTab);
        return bookTab;
    }

    private void ShowOpenBookPanel()
    {
        IsOpenBookPanelVisible = true;
    }

    private void ToggleOpenBookPanel()
    {
        IsOpenBookPanelVisible = !IsOpenBookPanelVisible;
    }

    private void Exit()
    {
        // Will be handled by App.axaml.cs
        System.Environment.Exit(0);
    }

    private void SelectBookTab(BookTabViewModel bookTab)
    {
        // Update selection state
        foreach (var tab in OpenBooks)
        {
            tab.IsSelected = false;
        }
        
        bookTab.IsSelected = true;
        SelectedBookTab = bookTab;
        SelectedBookView = bookTab.BookView;
    }

    private void CloseBookTab(BookTabViewModel bookTab)
    {
        var index = OpenBooks.IndexOf(bookTab);
        OpenBooks.Remove(bookTab);
        
        // Select adjacent tab if current tab was closed
        if (bookTab.IsSelected && OpenBooks.Any())
        {
            var newIndex = Math.Min(index, OpenBooks.Count - 1);
            SelectBookTab(OpenBooks[newIndex]);
        }
        else if (!OpenBooks.Any())
        {
            SelectedBookTab = null;
            SelectedBookView = null;
        }
        
        bookTab.Dispose();
    }

    private void CloseAllTabs()
    {
        foreach (var tab in OpenBooks.ToList())
        {
            tab.Dispose();
        }
        OpenBooks.Clear();
        SelectedBookTab = null;
        SelectedBookView = null;
    }

    private void TileHorizontally()
    {
        // TODO: Implement horizontal tiling
        // This would split the right panel horizontally for multiple books
    }

    private void TileVertically()
    {
        // TODO: Implement vertical tiling  
        // This would split the right panel vertically for multiple books
    }

    private void FindInBook()
    {
        // TODO: Show find dialog for current book
        if (SelectedBookTab?.BookDisplayViewModel != null)
        {
            // Could show search dialog or focus search box
        }
    }

    private void SearchAllBooks()
    {
        // TODO: Show global search dialog
        // This would be the search functionality across all books
    }

    private void ShowAbout()
    {
        // TODO: Show about dialog
    }
}

public class BookTabViewModel : ViewModelBase, IDisposable
{
    private bool _isSelected;

    public BookTabViewModel(Book book, BookDisplayViewModel bookDisplayViewModel, Control bookView)
    {
        Book = book;
        BookDisplayViewModel = bookDisplayViewModel;
        BookView = bookView;
        DisplayTitle = book.LongNavPath?.Split('/').LastOrDefault() ?? book.FileName;
    }

    public Book Book { get; }
    public BookDisplayViewModel BookDisplayViewModel { get; }
    public Control BookView { get; }
    public string DisplayTitle { get; }

    public bool IsSelected
    {
        get => _isSelected;
        set => this.RaiseAndSetIfChanged(ref _isSelected, value);
    }

    public void Dispose()
    {
        // Clean up resources if needed
        BookDisplayViewModel.Dispose();
    }
}